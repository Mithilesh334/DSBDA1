import numpy as np
import pandas as pd
from sklearn.datasets import fetch_openml
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error



boston = fetch_openml(name='boston', version=1, as_frame=True)



X=pd.DataFrame(boston.data,columns=boston.feature_names)



Y=pd.to_numeric(boston.target)




X=X.to_numpy(dtype=np.float64)
Y=Y.to_numpy(dtype=np.float64)



X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=42)



model=LinearRegression()


model.fit(X_train,Y_train)




Y_pred=model.predict(X_test)

Y_pred




mse=mean_squared_error(Y_pred,Y_test)
mse





OR----------------------------------------------------------------------






# Import libraries
from sklearn.datasets import fetch_california_housing
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import pandas as pd
import matplotlib.pyplot as plt

# Load the dataset
california = fetch_california_housing()
X = pd.DataFrame(california.data, columns=california.feature_names)
y = california.target

# Split into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Predict on test set
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse:.2f}")
print(f"R-squared Score: {r2:.2f}")

# Optional: Plot predicted vs actual values
plt.scatter(y_test, y_pred, alpha=0.3)
plt.xlabel("Actual Median House Value")
plt.ylabel("Predicted Median House Value")
plt.title("Linear Regression on California Housing Data")
plt.show()






